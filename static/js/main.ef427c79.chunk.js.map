{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","CustomInput","title","value","change","useState","active","setActive","className","style","color","transition","onFocus","onBlur","onChange","event","target","type","placeholder","SignUp","fullName","setFullName","username","setUsername","email","setEmail","password","setPassword","confPassword","setConfPassword","setFreeEmailStatus","isLoading","setIsLoading","useEffect","clearTimeout","window","emailTime","setTimeout","alert","onClick","axios","url","method","headers","data","JSON","stringify","md5","then","response","catch","e","display","CircularProgress","size","SignIn","App","activePage","setActivePage","id","width","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.ef427c79.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useEffect, useState} from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport axios from 'axios';\r\n\r\nimport md5 from 'md5';\r\n\r\nimport {CircularProgress } from '@material-ui/core';\r\n\r\n\r\nlet CustomInput = ({title, value, change}) => {\r\n  let [active, setActive] = useState(false);\r\n  return (\r\n    <div className=\"input__wrapper\">\r\n      <div className='input__title__container' style={active ? {color: \"#ad5050\", transition: \".2s all\"} : {transition: \".2s all\"}}>{title}</div>\r\n      <input className='reg__input' onFocus={() => setActive(true)} onBlur={() => setActive(false)} value={value} onChange={(event) => change(event.target.value) }\r\n          type={title === \"password\" || title === \"confirm password\" ? \"password\" : \"text\"}\r\n          placeholder={\"\"}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nlet validateEmail = (email) => {\r\n  var re = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n  return re.test(String(email).toLowerCase());\r\n}\r\n\r\nlet SignUp = () => {\r\n  let [fullName, setFullName] = useState(\"\");\r\n  let [username, setUsername] = useState(\"\");\r\n  let [email, setEmail] = useState(\"\");\r\n  let [password, setPassword] = useState(\"\");\r\n  let [confPassword, setConfPassword] = useState(\"\")\r\n  let [freeEmailStatus, setFreeEmailStatus] = useState(null);\r\n  let [isLoading, setIsLoading] = useState(false);\r\n  // let []\r\n  // window.emailTime;\r\n  useEffect(() => {\r\n    if (email === \"\") {\r\n      setFreeEmailStatus(null);\r\n      clearTimeout(window.emailTime);\r\n    } else {\r\n      clearTimeout(window.emailTime);\r\n      window.emailTime = setTimeout(() => {\r\n        alert(\"LOADING\")\r\n      }, 1000)\r\n    }\r\n  }, [email])\r\n  // null - пользователь ничего не вводил или в поле пусто\r\n  // \"LOAD\" - получение инфы \r\n  // \"OK\"   - почта свободна \r\n  // \"ERR\"  - почта не свободна\r\n  let sendSignUpData = () => {\r\n    setIsLoading(true);\r\n    axios({\r\n      url: \"https://60be0604f848.ngrok.io/signup\",\r\n      method: \"post\",\r\n      headers: {\r\n        // \"Access-Control-Allow-Origin\" : \"https://afc210a26eaa.ngrok.io\",\r\n        // \"Access-Control-Allow-Origin\" : \"*\",\r\n        // \"Access-Control-Allow-Credentials\": \"true\",\r\n      },\r\n      data: JSON.stringify({\r\n        fullName: fullName,\r\n        username: username, \r\n        email: email, \r\n        password: md5(password),\r\n      })\r\n    }).then(response => {\r\n      setIsLoading(false);\r\n      alert('nice');\r\n    }).catch(e => {\r\n      \r\n    })\r\n  }\r\n  return (\r\n    <div className='signup__container'>\r\n      <CustomInput title=\"full name\" value={fullName} change={setFullName}/>\r\n      <CustomInput title=\"username\" value={username} change={setUsername}/>\r\n      <CustomInput title=\"email\" value={email} change={setEmail}/>\r\n      <CustomInput title=\"password\" value={password} change={setPassword}/>\r\n      <CustomInput title=\"confirm password\" value={confPassword} change={setConfPassword}/>\r\n      <div className=\"button__container\" onClick={() => sendSignUpData()}>\r\n        <span style={isLoading ? {display: \"none\"} : {}}>Sign up</span>\r\n        <div className=\"loader__wrapper\" style={!isLoading ? {display: \"none\"} : {}}>\r\n          <CircularProgress color='primary' size={25}/>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nlet SignIn = () => {\r\n  let [username, setUsername] = useState(\"\");\r\n  let [password, setPassword] = useState(\"\");\r\n  let [isLoading, setIsLoading] = useState(false);\r\n  let sendSignInData = () => {\r\n    setIsLoading(true);\r\n    axios({\r\n      url: \"https://60be0604f848.ngrok.io/signup\",\r\n      method: \"post\",\r\n      headers: {\r\n        // \"Access-Control-Allow-Origin\" : \"https://afc210a26eaa.ngrok.io\",\r\n        // \"Access-Control-Allow-Origin\" : \"*\",\r\n        // \"Access-Control-Allow-Credentials\": \"true\",\r\n      },\r\n      data: JSON.stringify({\r\n        username: username,\r\n        password: md5(password),\r\n      })\r\n    }).then(response => {\r\n      setIsLoading(false);\r\n      alert('nice');\r\n    }).catch(e => {\r\n      \r\n    })\r\n  }\r\n  return (\r\n    <div className='signup__container'>\r\n      <CustomInput title=\"username\" value={username} change={setUsername}/>\r\n      <CustomInput title=\"password\" value={password} change={setPassword}/>\r\n      {/* <div className=\"shadow__loading\" style={!isLoading ? {display: \"none\"} : {}}>\r\n        <CircularProgress color='primary'/>\r\n      </div> */}\r\n      <div className=\"button__container\" onClick={() => sendSignInData()}>\r\n      <span style={isLoading ? {display: \"none\"} : {}}>Sign in</span>\r\n        <div className=\"loader__wrapper\" style={!isLoading ? {display: \"none\"} : {}}>\r\n          <CircularProgress color='primary' size={25}/>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nlet App = () => {\r\n  let [activePage, setActivePage] = useState(1); // 1 - SIGN_UP | 2 - SIGN_IN\r\n  return (\r\n    <div id=\"wrapper\">\r\n      <div className='main__container'>\r\n          <div className='reg__container'>\r\n            <div className='swap__container'>\r\n              <div className=\"swap__element\" onClick={() => setActivePage(1)} style={activePage === 1 ? {color: \"#c96f6f\"} : {}}>\r\n                SIGN UP\r\n              </div>\r\n              <div className=\"swap__element\"onClick={() => setActivePage(2)} style={activePage === 2? {color: \"#c96f6f\"} : {}}>\r\n                SIGN IN\r\n              </div>\r\n            </div>\r\n            <div style={{width: \"100%\"}}>\r\n              {\r\n                activePage === 1 && <SignUp/>\r\n              }\r\n              {\r\n                activePage === 2 && <SignIn/>\r\n              }\r\n            </div>\r\n          </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}